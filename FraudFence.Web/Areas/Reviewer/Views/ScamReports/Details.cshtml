@model FraudFence.Web.Areas.Reviewer.Models.ScamReportDetailsViewModel
@using FraudFence.EntityModels.Enums

@{
    ViewData["Title"] = "Scam Report Details";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>


<style>
    .sidebar-stretch {
        min-height: 80vh;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
    }
    .sidebar-card {
        flex: 1 1 auto;
        display: flex;
        flex-direction: column;
        margin-bottom: 2rem;
    }
    .sidebar-card-body {
        flex: 1 1 auto;
        display: flex;
        flex-direction: column;
        padding-bottom: 1rem;
        padding-top: 1rem;
    }
</style>

<div class="container-fluid">
    <div class="row">
        <!-- Main Content -->
        <div class="col-md-8">
            <h2 class="mb-3">Scam Report #@Model.Id</h2>
            <div class="mb-3">
                <strong>Title/Description:</strong>
                <p>@Model.Content</p>
            </div>
            <div class="mb-3">
                <strong>Submitted By:</strong> @Model.SubmittedBy
            </div>
            <div class="mb-3">
                <strong>Date Submitted:</strong> @Model.DateSubmitted.ToString("yyyy-MM-dd")
            </div>
            <div class="mb-3">
                <strong>First Encountered On:</strong> @Model.FirstEncounteredOn.ToString("yyyy-MM-dd")
            </div>
            <div class="mb-3">
                <strong>Reviewer:</strong> @Model.Reviewer
            </div>
            @if (Model.ScamReportAttachmentLinks != null && Model.ScamReportAttachmentLinks.Any())
            {
                <div class="card mb-4">
                    <div class="card-header">
                        Attachments
                    </div>
                    <div class="card-body">
                        <div id="attachmentCarousel" class="carousel slide" data-bs-ride="carousel">
                            <div class="carousel-inner">
                                @for (int i = 0; i < Model.ScamReportAttachmentLinks.Count; i++)
                                {
                                    var link = Model.ScamReportAttachmentLinks[i];
                                    <div class="carousel-item @(i == 0 ? "active" : "")">
                                        <img src="@link"
                                             class="d-block w-100"
                                             alt="Attachment @(i + 1)"
                                             style="max-height: 400px; object-fit: contain;" />
                                    </div>
                                }
                            </div>
                            <button class="carousel-control-prev" type="button" data-bs-target="#attachmentCarousel" data-bs-slide="prev">
                                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                <span class="visually-hidden">Previous</span>
                            </button>
                            <button class="carousel-control-next" type="button" data-bs-target="#attachmentCarousel" data-bs-slide="next">
                                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                <span class="visually-hidden">Next</span>
                            </button>
                        </div>
                    </div>
                </div>
            }

        </div>

        <!-- Sidebar -->
        <div class="col-md-4 sidebar-stretch">
            <div class="card sidebar-card">
                <div class="card-body sidebar-card-body">
                    <h5 class="card-title">Actions</h5>
                    <form asp-action="Details" asp-controller="ScamReports" asp-area="Reviewer" method="post">
                        <input type="hidden" name="Id" value="@Model.Id" />
                        <div class="form-group mb-3">
                            <label for="statusSelect"><strong>Status</strong></label>
                            <select class="form-control" id="statusSelect" name="Status">
                                @foreach (ReportStatus status in new[] { ReportStatus.Submitted, ReportStatus.Verified, ReportStatus.Rejected })
                                {
                                    <option value="@status" selected="@(status == Model.Status ? "selected" : null)">@status</option>
                                }
                            </select>
                        </div>
                        <div class="form-group mb-3">
                            <label for="investigationNotes"><strong>Investigation Notes</strong></label>
                            <textarea class="form-control" id="investigationNotes" name="InvestigationNotes" rows="5" placeholder="Add notes here...">@Model.InvestigationNotes</textarea>
                        </div>
                        <div class="form-group mb-3">
                            <label for="externalAgencySelect"><strong>Refer to External Agency</strong></label>
                            <select class="form-control" id="externalAgencySelect" name="ExternalAgencyId">
                                <option value="">-- Select Agency --</option>
                                @if (Model.Agencies != null)
                                {
                                    var selectedAgencyId = Model.ExternalAgencyId?.ToString() ?? "";
                                    foreach (var agency in Model.Agencies)
                                    {
                                        <option value="@agency.Value" selected="@(agency.Value == selectedAgencyId ? "selected" : null)">@agency.Text</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="form-group mb-3">
                            <label for="reviewerSearch"><strong>Add Reviewers</strong></label>
                            <input type="text" id="reviewerSearch" class="form-control" placeholder="Type to search reviewers..." autocomplete="off" />
                            <div id="reviewerSuggestions" class="list-group" style="position: absolute; z-index: 1000;"></div>
                            <div id="selectedReviewers" class="mt-2"></div>
                            <!-- Hidden inputs for selected reviewer IDs -->
                            <div id="selectedReviewerInputs"></div>
                        </div>
                        <button type="submit" class="btn btn-primary w-100">Save</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div> 
<script>
    // Reviewer data from server
    const allReviewers = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.AllReviewers));
    const selectedReviewerIds = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.SelectedReviewerIds));

    const reviewerSearch = document.getElementById('reviewerSearch');
    const reviewerSuggestions = document.getElementById('reviewerSuggestions');
    const selectedReviewers = document.getElementById('selectedReviewers');
    const selectedReviewerInputs = document.getElementById('selectedReviewerInputs');

    let selected = new Set(selectedReviewerIds);

    function renderSelectedReviewers() {
        selectedReviewers.innerHTML = '';
        selectedReviewerInputs.innerHTML = '';
        allReviewers.forEach(r => {
            if (selected.has(parseInt(r.Value))) {
                // Tag
                const tag = document.createElement('span');
                tag.className = 'badge bg-info text-dark me-1 mb-1';
                tag.style.fontSize = '1em';
                tag.textContent = r.Text + ' ';
                // Remove button
                const removeBtn = document.createElement('span');
                removeBtn.textContent = 'Ã—';
                removeBtn.style.cursor = 'pointer';
                removeBtn.onclick = () => {
                    selected.delete(parseInt(r.Value));
                    renderSelectedReviewers();
                };
                tag.appendChild(removeBtn);
                selectedReviewers.appendChild(tag);
                // Hidden input
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'SelectedReviewerIds';
                input.value = r.Value;
                selectedReviewerInputs.appendChild(input);
            }
        });
    }

    reviewerSearch.addEventListener('input', function() {
        const query = this.value.trim().toLowerCase();
        reviewerSuggestions.innerHTML = '';
        if (!query) return;
        const matches = allReviewers.filter(r => r.Text.toLowerCase().includes(query) && !selected.has(parseInt(r.Value)));
        matches.slice(0, 5).forEach(r => {
            const item = document.createElement('button');
            item.type = 'button';
            item.className = 'list-group-item list-group-item-action';
            item.textContent = r.Text;
            item.onclick = () => {
                selected.add(parseInt(r.Value));
                reviewerSearch.value = '';
                reviewerSuggestions.innerHTML = '';
                renderSelectedReviewers();
            };
            reviewerSuggestions.appendChild(item);
        });
    });

    // Hide suggestions when clicking outside
    document.addEventListener('click', function(e) {
        if (!reviewerSearch.contains(e.target) && !reviewerSuggestions.contains(e.target)) {
            reviewerSuggestions.innerHTML = '';
        }
    });

    // Initial render
    renderSelectedReviewers();
</script>
<style>
    #selectedReviewers .badge {
        display: inline-flex;
        align-items: center;
        margin-right: 0.25em;
        margin-bottom: 0.25em;
        padding-right: 0.5em;
        background: #fff !important;
        color: #000 !important;
        border: 1px solid #000;
        box-shadow: none;
    }
    #selectedReviewers .badge span:last-child {
        margin-left: 0.25em;
    }
    #reviewerSuggestions {
        width: 100%;
        max-height: 200px;
        overflow-y: auto;
        display: block;
    }
</style> 